---
import Layout from "@layouts/Common.astro";

import HTMLInput from "@components/form/HTMLInput.astro";

import Cookies from "@lib/cookies";
import { db } from "@lib/database";
import { employee } from "@lib/database/schema/employee";
import { location } from "@lib/database/schema/location";
import { schedule } from "@lib/database/schema/schedule";
import { shift } from "@lib/database/schema/shift";
import { DefaultDict, fmtShift } from "@lib/utils";

import * as m from "@paraglide/messages";
import { setLanguageTag } from "@paraglide/runtime";

import { and, eq } from "drizzle-orm";

setLanguageTag((Astro.preferredLocale || "en") as any);

if ((await db.select().from(location)).length === 0) {
  console.log("No locations found in the database! Redirecting to /locations so the user can add one.");
  return Astro.redirect("/locations");
}

let current_location = "";
let current_location_id = -1;

if (Astro.cookies.has(Cookies.current_location)) {
  current_location = Astro.cookies.get(Cookies.current_location)?.value || "";
  if (current_location !== "" && (await db.select().from(location).where(eq(location.name, current_location))).length == 0) {
    console.warn(`Location '${current_location}' not found in the database! Clearing the cookie.`);
    Astro.cookies.delete(Cookies.current_location);
    current_location = "";
  }
}

if (current_location === "") {
  const default_location = (await db.select({ name: location.name }).from(location).where(eq(location.default_location, true)))[0]["name"];
  current_location = default_location;
  Astro.cookies.set(Cookies.current_location, current_location);
}

if (current_location === "") {
  console.log(`Current location is for some reason not set, redirecting to /locations`);
  return Astro.redirect("/locations");
}

current_location_id = (await db.select({ id: location.id }).from(location).where(eq(location.name, current_location)))[0]["id"];

const employees = await db.select().from(employee).where(eq(employee.location_id, current_location_id)).orderBy(employee.full_name);

const dayFormat = new Intl.DateTimeFormat(Astro.preferredLocale || "en", { weekday: "long" });

const now = new Date();
const year = (Astro.url.searchParams.get("year") as unknown as number) || now.getFullYear();
const month = (Astro.url.searchParams.get("month") as unknown as number) || now.getMonth() + 1;

const days_count = new Date(year, month, 0).getDate();

const full_schedule = {};
const total_hours = new DefaultDict(Number);
const shift_counts = new DefaultDict(() => new DefaultDict(Number));

for (let e in employees) {
  full_schedule[employees[e].id] = {};

  const employee_schedule = await db
    .select()
    .from(schedule)
    .where(and(eq(schedule.employee_id, employees[e].id), eq(schedule.year, year), eq(schedule.month, month)))
    .leftJoin(shift, eq(schedule.shift_id, shift.id))
    .orderBy(schedule.day);

  if (employee_schedule.length === 0) continue;

  //   console.log("schedule for", employees[e].full_name, employee_schedule);

  employee_schedule
    .filter((s) => {
      return s.schedule !== null && s.shift !== null;
    })
    .map((s) => {
      //   console.log("Adding shift", s.shift!.id, "at day", s.schedule.day, "for", employees[e].full_name, s);

      full_schedule[employees[e].id][s.schedule.day] = {};
      full_schedule[employees[e].id][s.schedule.day]["start"] = fmtShift(s.shift!.start);
      full_schedule[employees[e].id][s.schedule.day]["end"] = fmtShift(s.shift!.end);

      const shift_hours =
        Math.abs(
          Date.parse(`${s.schedule.year}-${s.schedule.month}-${s.schedule.day} ${s.shift!.end}`) -
            Date.parse(`${s.schedule.year}-${s.schedule.month}-${s.schedule.day} ${s.shift!.start}`)
        ) /
        (60 * 60 * 1000);

      total_hours[employees[e].id] += shift_hours;

      shift_counts[s.shift!.id][s.schedule.day] += 1;
      shift_counts[s.shift!.id]["total"] += 1;
    });
}

const shifts = await db.select().from(shift);

// console.log("shift_counts", shift_counts);
---

<Layout title="schedplanner">
  <div>
    <div class="p-4 mx-auto">
      <form method="POST" action="/api/month" id="date-picker" class="max-w-64">
        <HTMLInput name="month" type="month" onchange="this.form.submit()" value=`${year}-${String(month).padStart(2, "0")}` />
      </form>
    </div>
    <div class="overflow-auto h-[calc(100vh-7.9rem)]">
      <table class="table-auto min-w-full divide-x divide-gray-200 border-gray-200 border-collapse">
        <thead>
          <tr class="divide-x">
            <th></th>
            {
              Array.from(Array(days_count), (_, i) => {
                i = i + 1;
                const _day = new Date(year, month - 1, i);
                const is_today = now.setHours(0, 0, 0, 0) == _day.setHours(0, 0, 0, 0);
                const is_sunday = _day.getDay() == 0;
                return (
                  <th
                    class={`text-sm font-normal ${is_sunday ? "bg-red-500 text-gray-100" : is_today ? "bg-gray-300 text-gray-500" : "bg-gray-50 text-gray-500"} border-t-[1px]`}
                  >
                    {i}
                  </th>
                );
              })
            }
            <th class="px-4 text-sm font-normal bg-gray-50 border-t-[1px]" rowspan="2">Total hours</th>
          </tr>
          <tr class="divide-x">
            <th></th>
            {
              Array.from(Array(days_count), (_, i) => {
                i = i + 1;
                const _day = new Date(year, month - 1, i);
                const is_today = now.setHours(0, 0, 0, 0) == _day.setHours(0, 0, 0, 0);
                const is_sunday = _day.getDay() == 0;
                return (
                  <th
                    class={`text-sm font-normal ${is_sunday ? "bg-red-500 text-gray-100" : is_today ? "bg-gray-300 text-gray-500" : "bg-gray-50 text-gray-500"} border-t-[1px]`}
                  >
                    {dayFormat.format(_day)}
                  </th>
                );
              })
            }
          </tr>
        </thead>
        <tbody class="divide-y border-y-[1px]">
          {
            employees.map((employee) => {
              return (
                <tr class="divide-x">
                  <td class="p-4 text-sm font-bold whitespace-nowrap">{employee.full_name}</td>
                  {Array.from(Array(days_count), (_, i) => {
                    i = i + 1;
                    const _day = new Date(year, month - 1, i);
                    const is_today = now.setHours(0, 0, 0, 0) == _day.setHours(0, 0, 0, 0);
                    const is_sunday = _day.getDay() == 0;
                    return (
                      <td
                        class={`${is_sunday ? "bg-red-500 text-gray-100" : is_today ? "bg-gray-300 bg-opacity-100" : "bg-slate-200 bg-opacity-0"} hover:bg-opacity-50 transition-colors`}
                      >
                        <a
                          href={`/schedule?location=${current_location_id}&employee=${employee.id}&month=${month}&day=${i}`}
                          class="text-sm flex flex-col items-center justify-center min-w-12 min-h-12"
                        >
                          {full_schedule[employee.id][i] ? (
                            <>
                              <span>{full_schedule[employee.id][i]["start"]}</span>
                              <span>{full_schedule[employee.id][i]["end"]}</span>
                            </>
                          ) : null}
                        </a>
                      </td>
                    );
                  })}
                  <td class="text-sm font-bold whitespace-nowrap">
                    <div class="flex flex-col items-center justify-center min-w-12 min-h-12">
                      <span class="">{total_hours[employee.id]}</span>
                    </div>
                  </td>
                </tr>
              );
            })
          }
          {
            shifts
              .filter((s) => {
                let found = false;
                Array.from(Array(days_count), (_, i) => {
                  if (shift_counts[s.id][i + 1] !== 0) {
                    console.log(s.id, i + 1, true);
                    found = true;
                  }
                });

                return found;
              })
              .map((s) => {
                console.log(s);
                return (
                  <tr class="divide-x">
                    <td class="p-4">{m.count_on_shift({ shift: s.id, start: fmtShift(s.start), end: fmtShift(s.end) })}</td>
                    {Array.from(Array(days_count), (_, i) => {
                      i = i + 1;
                      const _day = new Date(year, month - 1, i);
                      const is_today = now.setHours(0, 0, 0, 0) == _day.setHours(0, 0, 0, 0);
                      const is_sunday = _day.getDay() == 0;
                      const count = shift_counts[s.id][i];
                      return (
                        <th
                          class={`text-sm ${count != 0 ? "font-bolder" : "font-normal"} ${is_sunday ? "bg-red-500 text-gray-100" : is_today ? "bg-gray-300 text-gray-500" : "bg-gray-50 text-gray-500"} border-t-[1px]`}
                        >
                          {count}
                        </th>
                      );
                    })}
                    <td />
                  </tr>
                );
              })
          }
        </tbody>
      </table>
    </div>
  </div>
</Layout>
