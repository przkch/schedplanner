---
import Layout from "@layouts/Common.astro";

import MonthButton from "@components/buttons/MonthButton.astro";
import HTMLInput from "@components/form/HTMLInput.astro";
import AddSchedule from "@components/modals/AddSchedule.astro";

import Cookies from "@lib/cookies";
import { db } from "@lib/database";
import { employee } from "@lib/database/schema/employee";
import { group } from "@lib/database/schema/group";
import { schedule } from "@lib/database/schema/schedule";
import { shift } from "@lib/database/schema/shift";
import { DefaultDict, fmtShift } from "@lib/utils";

import * as m from "@paraglide/messages";
import { setLanguageTag } from "@paraglide/runtime";

import { and, eq } from "drizzle-orm";

setLanguageTag((Astro.preferredLocale || "en") as any);

if ((await db.select().from(group)).length === 0) {
  console.log("No groups found in the database! Redirecting to /groups so the user can add one.");
  return Astro.redirect("/groups");
}

let current_group = "";
let current_group_id = -1;

if (Astro.cookies.has(Cookies.current_group)) {
  current_group = Astro.cookies.get(Cookies.current_group)?.value || "";
  if (current_group !== "" && (await db.select().from(group).where(eq(group.name, current_group))).length == 0) {
    console.warn(`Location '${current_group}' not found in the database! Clearing the cookie.`);
    Astro.cookies.delete(Cookies.current_group);
    current_group = "";
  }
}

if (current_group === "") {
  const default_group = (await db.select({ name: group.name }).from(group).where(eq(group.default_group, true)))[0]["name"];
  current_group = default_group;
  Astro.cookies.set(Cookies.current_group, current_group);
}

if (current_group === "") {
  console.log("Current group is for some reason not set, redirecting to /groups");
  return Astro.redirect("/groups");
}

current_group_id = (await db.select({ id: group.id }).from(group).where(eq(group.name, current_group)))[0]["id"];

const employees = await db.select().from(employee).where(eq(employee.group_id, current_group_id)).orderBy(employee.full_name);

const dayFormat = new Intl.DateTimeFormat(Astro.preferredLocale || "en", { weekday: "short" });

const now = new Date();
const year = (Astro.url.searchParams.get("year") as unknown as number) || now.getFullYear();
const month = (Astro.url.searchParams.get("month") as unknown as number) || now.getMonth() + 1;

const days_count = new Date(year, month, 0).getDate();

const full_schedule = {};
const total_hours = new DefaultDict(Number);
const shift_counts = new DefaultDict(() => new DefaultDict(Number));

for (let e in employees) {
  full_schedule[employees[e].id] = {};

  const employee_schedule = await db
    .select()
    .from(schedule)
    .where(and(eq(schedule.employee_id, employees[e].id), eq(schedule.year, year), eq(schedule.month, month)))
    .leftJoin(shift, eq(schedule.shift_id, shift.id))
    .orderBy(schedule.day);

  if (employee_schedule.length === 0) continue;

  employee_schedule
    .filter((s) => {
      return s.schedule !== null && s.shift !== null;
    })
    .map((s) => {
      full_schedule[employees[e].id][s.schedule.day] = {};
      full_schedule[employees[e].id][s.schedule.day]["start"] = fmtShift(s.shift!.start);
      full_schedule[employees[e].id][s.schedule.day]["end"] = fmtShift(s.shift!.end);

      const shift_hours =
        Math.abs(
          Date.parse(`${s.schedule.year}-${s.schedule.month}-${s.schedule.day} ${s.shift!.end}`) -
            Date.parse(`${s.schedule.year}-${s.schedule.month}-${s.schedule.day} ${s.shift!.start}`)
        ) /
        (60 * 60 * 1000);

      total_hours[employees[e].id] += shift_hours;

      shift_counts[s.shift!.id][s.schedule.day] += 1;
      shift_counts[s.shift!.id]["total"] += 1;
    });
}

const shifts = await db.select().from(shift);
---

<Layout title="SchedPlanner">
  <div class="p-4 mx-auto flex flex-row justify-between gap-4 items-center">
    <MonthButton icon="mdi:arrow-left" text="Previous" href={`/?year=${year}&month=${Number(month) - 1}`} />
    <form method="POST" action="/api/month" id="date-picker" class="max-w-64">
      <HTMLInput
        name="month"
        type="month"
        onchange="this.form.submit()"
        value=`${year}-${String(month).padStart(2, "0")}`
        class="flex flex-row items-center"
      />
    </form>
    <MonthButton icon="mdi:arrow-right" text="Next" class="flex-row-reverse" href={`/?year=${year}&month=${Number(month) + 1}`} />
  </div>
  <div class="overflow-auto h-[calc(100vh-10.1rem)]">
    <table class="table-auto min-w-full border-collapse text-sm">
        <tr>
          <td class="font-bold text-left px-4" rowspan="2">Employee</td>
          {
            Array.from(Array(days_count), (_, i) => {
              i = i + 1;
              const _day = new Date(year, month - 1, i);
              const is_today = now.setHours(0, 0, 0, 0) == _day.setHours(0, 0, 0, 0);
              const is_sunday = _day.getDay() == 0;
              return (
                <td
                  class:list={[
                    "text-center border-[1px] border-b-0",
                    is_sunday ? "bg-red-500 text-gray-100" : is_today ? "bg-gray-300 text-gray-800" : "bg-gray-50 text-gray-800",
                  ]}
                >
                  {i}
                </td>
              );
            })
          }
          <td class="px-4 font-normal bg-gray-50 border-[1px]" rowspan="2">Total hours</td>
        </tr>
        <tr>
          {
            Array.from(Array(days_count), (_, i) => {
              i = i + 1;
              const _day = new Date(year, month - 1, i);
              const is_today = now.setHours(0, 0, 0, 0) == _day.setHours(0, 0, 0, 0);
              const is_sunday = _day.getDay() == 0;
              return (
                <td
                  class:list={["text-center font-normal border-[1px] border-t-0", is_sunday ? "bg-red-500 text-gray-100" : is_today ? "bg-gray-300 text-gray-500" : "bg-gray-50 text-gray-500"]}}
                >
                  {dayFormat.format(_day)}
                </td>
              );
            })
          }
        </tr>
        {
          employees.map((employee) => {
            return (
              <tr>
                <td class="px-4  whitespace-nowrap h-fit border-[1px]">{employee.full_name}</td>
                {Array.from(Array(days_count), (_, i) => {
                  i = i + 1;
                  const _day = new Date(year, month - 1, i);
                  const is_today = now.setHours(0, 0, 0, 0) == _day.setHours(0, 0, 0, 0);
                  const is_sunday = _day.getDay() == 0;

                  const _id = "id" + Math.random().toString(16).slice(2);
                  return (
                    <td
                      class:list={[is_sunday ? "bg-red-500 text-gray-100" : is_today ? "bg-gray-300 bg-opacity-100" : "bg-slate-200 bg-opacity-0", "hover:bg-opacity-50 transition-colors border-[1px]"]}
                    >
                      <button class="flex flex-col items-center justify-center min-w-10 min-h-10" onclick={`window.${_id}.showModal()`}>
                        {full_schedule[employee.id][i] ? (
                          <>
                            <span>{full_schedule[employee.id][i]["start"]}</span>
                            <span>{full_schedule[employee.id][i]["end"]}</span>
                          </>
                        ) : null}
                      </button>
                      <AddSchedule id={_id} year={year} month={month} day={i} employee_id={employee.id} shifts={shifts} />
                    </td>
                  );
                })}
                <td class=" font-bold whitespace-nowrap border-[1px]">
                  <div class="flex flex-col items-center justify-center min-w-10 min-h-10">
                    <span class="">{total_hours[employee.id]}</span>
                  </div>
                </td>
              </tr>
            );
          })
        }
        <tr>
          <td class="font-bold text-left px-4" rowspan="2" >Counts on shifts</th>
          {
            Array.from(Array(days_count), (_, i) => {
              i = i + 1;
              const _day = new Date(year, month - 1, i);
              const is_today = now.setHours(0, 0, 0, 0) == _day.setHours(0, 0, 0, 0);
              const is_sunday = _day.getDay() == 0;
              return (
                <td class:list={["text-center", is_sunday ? "bg-red-500 text-gray-100" : is_today ? "bg-gray-300 text-gray-800" : "bg-gray-50 text-gray-800 border-[1px] border-b-0"]}>
                  {i}
                </td>
              );
            })
          }
        </tr>
        <tr>
          {
            Array.from(Array(days_count), (_, i) => {
              i = i + 1;
              const _day = new Date(year, month - 1, i);
              const is_today = now.setHours(0, 0, 0, 0) == _day.setHours(0, 0, 0, 0);
              const is_sunday = _day.getDay() == 0;
              return (
                <td
                  class:list={["font-normal text-center", is_sunday ? "bg-red-500 text-gray-100" : is_today ? "bg-gray-300 text-gray-500" : "bg-gray-50 text-gray-500 border-[1px] border-t-0"]}}
                >
                  {dayFormat.format(_day)}
                </td>
              );
            })
          }
        </tr>
        {
          shifts
            .filter((s) => {
              let found = false;
              Array.from(Array(days_count), (_, i) => {
                if (shift_counts[s.id][i + 1] !== 0) {
                  found = true;
                }
              });

              return found;
            })
            .map((s) => {
              return (
                <tr>
                  <td class="px-4 h-fit min-w-64 border-[1px]">{m.count_on_shift({ start: fmtShift(s.start), end: fmtShift(s.end) })}</td>
                  {Array.from(Array(days_count), (_, i) => {
                    i = i + 1;
                    const _day = new Date(year, month - 1, i);
                    const is_today = now.setHours(0, 0, 0, 0) == _day.setHours(0, 0, 0, 0);
                    const is_sunday = _day.getDay() == 0;
                    const count = shift_counts[s.id][i];
                    return (
                      <td
                        class:list={["h-fit text-center border-[1px]", count != 0 ? "font-bolder" : "font-normal", is_sunday ? "bg-red-500 text-gray-100" : is_today ? "bg-gray-300 text-gray-800" : "text-gray-800"]}
                      >
                        {count}
                      </td>
                    );
                  })}
                </tr>
              );
            })
        }
    </table>
    <div class="m-4">
      <button class="bg-blue-500 text-white text-sm px-4 py-2 rounded-xl hover:bg-opacity-75 transition-colors">
        <a href={`/print?location=${current_group_id}&year=${year}&month=${month}`}>Print</a>
      </button>
    </div>
  </div>
</Layout>
