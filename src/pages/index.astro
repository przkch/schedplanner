---
import Layout from "@layouts/Layout.astro";
import { db } from "@lib/database";
import { employee } from "@lib/database/schema/employee";
import { location } from "@lib/database/schema/location";
import { schedule } from "@lib/database/schema/schedule";
import { shift } from "@lib/database/schema/shift";
import Cookies from "@lib/cookies";
import { fmtShift } from "@lib/utils";

import { and, eq } from "drizzle-orm";

if ((await db.select().from(location)).length === 0) {
  console.log("No locations found in the database! Redirecting to /locations so the user can add one.");
  return Astro.redirect("/locations");
}

let current_location = "";
let current_location_id = -1;

if (Astro.cookies.has(Cookies.current_location)) {
  console.log("Getting current location from cookies");
  current_location = Astro.cookies.get(Cookies.current_location)?.value || "";
  if (
    current_location !== "" &&
    (await db.select().from(location).where(eq(location.name, current_location))).length == 0
  ) {
    console.warn(`Location '${current_location}' not found in the database! Clearing the cookie.`);
    Astro.cookies.delete(Cookies.current_location);
    current_location = "";
  }
}

if (current_location === "") {
  console.log("Current location not set, getting the default one from the database");
  const default_location = (
    await db.select({ name: location.name }).from(location).where(eq(location.default_location, true))
  )[0]["name"];
  current_location = default_location;
  Astro.cookies.set(Cookies.current_location, current_location);
}

if (current_location === "") {
  console.log(`Current location is for some reason not set, redirecting to /locations`);
  return Astro.redirect("/locations");
}

current_location_id = (
  await db.select({ id: location.id }).from(location).where(eq(location.name, current_location))
)[0]["id"];

const employees = await db.select().from(employee).where(eq(employee.location_id, current_location_id));

const now = new Date();
const year = now.getFullYear();
const month = (Astro.url.searchParams.get("month") as unknown as number) || now.getMonth() + 1;
const month_str = new Date(now.getFullYear(), month, 0).toLocaleString("default", { month: "long" });

const days_count = new Date(now.getFullYear(), month, 0).getDate();

const full_schedule = {};

for (let e in employees) {
  full_schedule[employees[e].id] = {};

  const employee_schedule = await db
    .select()
    .from(schedule)
    .where(and(eq(schedule.employee_id, employees[e].id), eq(schedule.year, year), eq(schedule.month, month)))
    .leftJoin(shift, eq(schedule.shift_id, shift.id))
    .orderBy(schedule.day);

  employee_schedule
    .filter((s) => {
      return s.shift !== null;
    })
    .map((s) => {
      full_schedule[employees[e].id][s.schedule.day] = {};
      full_schedule[employees[e].id][s.schedule.day]["start"] = fmtShift(s.shift?.start);
      full_schedule[employees[e].id][s.schedule.day]["end"] = fmtShift(s.shift?.end);
    });
}
---

<Layout title="schedplanner">
  <div>
    <div class="container px-12 py-6 mx-auto">
      <h3 class="font-bold text-3xl">Schedule for {month_str}:</h3>
    </div>
    <div class="overflow-x-auto">
      <table class="table-auto min-w-full divide-x divide-gray-200">
        <thead class="bg-gray-50">
          <tr class="divide-x">
            <th></th>
            {
              Array.from(Array(days_count), (x, i) => {
                i = i + 1;
                return <th class="px-4 py-2 text-sm font-normal text-gray-500">{i}</th>;
              })
            }
          </tr>
        </thead>
        <tbody class="divide-y">
          {
            employees.map((employee) => {
              return (
                <tr class="divide-x">
                  <td class="p-4 text-sm font-bold whitespace-nowrap">{employee.full_name}</td>
                  {Array.from(Array(days_count), (x, i) => {
                    i = i + 1;
                    if (!full_schedule[employee.id][i]) {
                      return <td />;
                    }
                    return (
                      <td class="px-4 py-2 text-sm flex flex-col items-center">
                        <span>{full_schedule[employee.id][i]["start"]}</span>
                        <span>{full_schedule[employee.id][i]["end"]}</span>
                      </td>
                    );
                  })}
                </tr>
              );
            })
          }
        </tbody>
      </table>
    </div>
  </div>
</Layout>
