---
import AddSchedule from "@components/modals/AddSchedule.astro";
import TableHeaders from "@components/schedule/TableHeaders.astro";

import { db } from "@lib/database";
import { employee, group, schedule, shift } from "@lib/database/schema";
import { fmtShift } from "@lib/utils";

import * as m from "@paraglide/messages";
import { setLanguageTag } from "@paraglide/runtime";

import { and, eq, inArray } from "drizzle-orm";

setLanguageTag((Astro.preferredLocale || "en") as any);

if ((await db.select().from(group)).length === 0) {
  console.log("No groups found in the database! Redirecting to /groups so the user can add one.");
  return Astro.redirect("/groups");
}

let currentGroup = "";
let currentGroupId = -1;

if (Astro.cookies.has("current_group")) {
  currentGroup = Astro.cookies.get("current_group")?.value || "";
  if (currentGroup !== "" && (await db.select().from(group).where(eq(group.name, currentGroup))).length == 0) {
    console.warn(`Location '${currentGroup}' not found in the database! Clearing the cookie.`);
    Astro.cookies.delete("current_group");
    currentGroup = "";
  }
}

if (currentGroup === "") {
  const default_group = (await db.select({ name: group.name }).from(group).where(eq(group.defaultGroup, true)))[0]["name"];
  currentGroup = default_group;
  Astro.cookies.set("current_group", currentGroup);
}

if (currentGroup === "") {
  console.log("Current group is for some reason not set, redirecting to /groups");
  return Astro.redirect("/groups");
}

currentGroupId = (await db.select({ id: group.id }).from(group).where(eq(group.name, currentGroup)))[0]["id"];

const now = new Date();
const year = Astro.cookies.get("year")?.number() || now.getFullYear();
const month = Astro.cookies.get("month")?.number() || now.getMonth() + 1;

const employees = await db.select().from(employee).where(eq(employee.groupId, currentGroupId)).orderBy(employee.lastName, employee.firstName);

const employees_ids = employees.flatMap((e) => {
  return e.id;
});

const employees_schedule = await db
  .select({
    employeeId: schedule.employeeId,
    shiftId: shift.id,
    year: schedule.year,
    month: schedule.month,
    day: schedule.day,
    start: shift.start,
    end: shift.end,
    color: shift.color,
  })
  .from(schedule)
  .where(and(eq(schedule.year, year), eq(schedule.month, month), inArray(schedule.employeeId, employees_ids)))
  .leftJoin(shift, eq(schedule.shiftId, shift.id))
  .leftJoin(employee, eq(schedule.employeeId, employee.id))
  .orderBy(schedule.day);

const days_count = new Date(year, month, 0).getDate();

const full_schedule = {};
const total_hours = {};
const shift_counts = {};

for (const s of employees_schedule) {
  if (!(s.employeeId in full_schedule)) {
    full_schedule[s.employeeId] = {};
  }

  if (!s.shiftId || !s.start || !s.end || !s.color) {
    console.log(`No shift start found for day ${s.day}`);
    continue;
  }

  const _day = new Date(year, month - 1, s.day);

  full_schedule[s.employeeId][s.day] = {};
  full_schedule[s.employeeId][s.day]["start"] = fmtShift(s.start);
  full_schedule[s.employeeId][s.day]["end"] = fmtShift(s.end);
  full_schedule[s.employeeId][s.day]["color"] = s.color;
  full_schedule[s.employeeId][s.day]["isToday"] = now.setHours(0, 0, 0, 0) == _day.setHours(0, 0, 0, 0);
  full_schedule[s.employeeId][s.day]["isSunday"] = _day.getDay() == 0;

  const shift_hours =
    Math.abs(Date.parse(`${s.year}-${s.month}-${s.day} ${s.end}`) - Date.parse(`${s.year}-${s.month}-${s.day} ${s.start}`)) / (60 * 60 * 1000);

  if (!(s.employeeId in total_hours)) {
    total_hours[s.employeeId] = 0;
  }
  total_hours[s.employeeId] += shift_hours;

  if (!(s.shiftId in shift_counts)) {
    shift_counts[s.shiftId] = {};
  }

  if (!(s.day in shift_counts[s.shiftId])) {
    shift_counts[s.shiftId][s.day] = 0;
  }

  if (!("total" in shift_counts[s.shiftId])) {
    shift_counts[s.shiftId]["total"] = 0;
  }

  shift_counts[s.shiftId][s.day] += 1;
  shift_counts[s.shiftId]["total"] += 1;
}

const shifts = await db.select().from(shift);
---

<div class="overflow-auto h-[calc(100vh-10.1rem)]">
  <table class="table-auto border-collapse text-sm">
    <TableHeaders show_total_hours={true} />
    {
      employees.map((employee) => {
        return (
          <tr>
            <td class="px-4  whitespace-nowrap h-fit border-[1px]">
              {employee.firstName} {employee.lastName}
            </td>
            {Array.from(Array(days_count), (_, i) => {
              i = i + 1;

              const _id = "id" + Math.random().toString(16).slice(2);

              if (!(employee.id in full_schedule) || !(i in full_schedule[employee.id])) {
                return (
                  <td class="hover:bg-opacity-50 transition-colors border-[1px]">
                    <button
                      class="flex flex-col items-center justify-center w-10 h-10 invert mix-blend-difference"
                      onclick={`window.${_id}.showModal()`}
                    />
                    <AddSchedule id={_id} year={year} month={month} day={i} employee_id={employee.id} shifts={shifts} />
                  </td>
                );
              }

              const color = full_schedule[employee.id][i]["color"];

              return (
                <td
                  style={{ backgroundColor: color }}
                  class:list={[
                    "hover:bg-opacity-50 transition-colors border-[1px]",
                    color
                      ? null
                      : full_schedule[employee.id][i]["isSunday"]
                        ? "bg-red-500 text-gray-100"
                        : full_schedule[employee.id][i]["isToday"]
                          ? "bg-gray-300 bg-opacity-100"
                          : "bg-slate-200 bg-opacity-0",
                  ]}
                >
                  <button
                    class="flex flex-col items-center justify-center w-10 h-10 invert mix-blend-difference"
                    onclick={`window.${_id}.showModal()`}
                  >
                    <span>{full_schedule[employee.id][i]["start"]}</span>
                    <span>{full_schedule[employee.id][i]["end"]}</span>
                  </button>
                  <AddSchedule id={_id} year={year} month={month} day={i} employee_id={employee.id} shifts={shifts} />
                </td>
              );
            })}
            <td class:list={["border-[1px] text-xs text-center", total_hours[employee.id] ? "font-bold" : ""]}>
              {total_hours[employee.id] ? total_hours[employee.id] : 0}
            </td>
          </tr>
        );
      })
    }
    <TableHeaders />
    {
      shifts.map((s) => {
        return (
          <tr>
            <td class="px-4 h-fit min-w-64 border-[1px]">
              {s.label ? (
                s.label
              ) : (
                <>
                  {fmtShift(s.start)} - {fmtShift(s.end)}
                </>
              )}
            </td>
            {Array.from(Array(days_count), (_, i) => {
              i = i + 1;

              const _day = new Date(year, month - 1, i);
              const is_today = now.setHours(0, 0, 0, 0) == _day.setHours(0, 0, 0, 0);
              const is_sunday = _day.getDay() == 0;

              if (!(s.id in shift_counts) || !(i in shift_counts[s.id])) {
                return (
                  <td
                    class:list={[
                      "h-fit text-center border-[1px]",
                      is_sunday ? "bg-red-500 text-gray-100" : is_today ? "bg-gray-300 text-gray-800" : "text-gray-800",
                    ]}
                  >
                    0
                  </td>
                );
              }

              const count = shift_counts[s.id][i];

              return (
                <td
                  class:list={[
                    "h-fit text-center border-[1px] font-bold",
                    is_sunday ? "bg-red-500 text-gray-100" : is_today ? "bg-gray-300 text-gray-800" : "text-gray-800",
                  ]}
                >
                  {count}
                </td>
              );
            })}
          </tr>
        );
      })
    }
  </table>
</div>
