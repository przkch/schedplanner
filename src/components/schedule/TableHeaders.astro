---
import { holiday } from "@lib/database/schema";

interface Props {
  holidays: (typeof holiday.$inferSelect)[];
  footer?: boolean;
}

const { holidays, footer = false } = Astro.props;

const dayFormat = new Intl.DateTimeFormat(Astro.preferredLocale || "en", { weekday: "short" });

const now = new Date();
const year = Astro.cookies.get("year")?.number() || now.getFullYear();
const month = Astro.cookies.get("month")?.number() || now.getMonth() + 1;

const days_count = new Date(year, month, 0).getDate();
---

<tr>
  <td class="font-bold text-left px-4 border-1">{!footer ? "Employees" : "Counts on shifts"}</td>
  {
    Array.from(Array(days_count), (_, i) => {
      i = i + 1;
      const _day = new Date(year, month - 1, i);
      const is_today = now.setHours(0, 0, 0, 0) == _day.setHours(0, 0, 0, 0);
      const is_weekend = [0, 6].includes(_day.getDay());
      const is_custom_holiday = holidays
        .flatMap((h) => h.date)
        .includes(`${year}-${_day.toLocaleDateString("pl-PL", { month: "2-digit" })}-${_day.toLocaleDateString("pl-PL", { day: "2-digit" })}`);
      const is_free = is_weekend || is_custom_holiday;

      const custom_holiday = holidays.find(
        (h) => h.date == `${year}-${_day.toLocaleDateString("pl-PL", { month: "2-digit" })}-${_day.toLocaleDateString("pl-PL", { day: "2-digit" })}`
      );
      const custom_holiday_name = custom_holiday?.name;

      return (
        <td
          class:list={[
            "text-center border-1",
            {
              "bg-custom-holiday text-gray-100": is_free,
              "bg-gray-300 text-gray-800": is_today,
              "bg-gray-50 text-gray-800": !is_free && !is_today,
            },
          ]}
          title={custom_holiday_name ? custom_holiday_name : null}
        >
          {i}
          <br />
          {dayFormat.format(_day)}
        </td>
      );
    })
  }
  {!footer ? <td class="px-2 border-1">Total hours</td> : null}
</tr>
