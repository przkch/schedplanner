---
interface Props {
  title: string;
  show_total_hours?: boolean;
}

const { title, show_total_hours = false } = Astro.props;

const dayFormat = new Intl.DateTimeFormat(Astro.preferredLocale || "en", { weekday: "short" });

const now = new Date();
const year = Astro.cookies.get("year")?.number() || now.getFullYear();
const month = Astro.cookies.get("month")?.number() || now.getMonth() + 1;

const days_count = new Date(year, month, 0).getDate();
---

<>
  <tr>
    <td class="font-bold text-left px-4 border-[1px]" rowspan="2">{title}</td>
    {
      Array.from(Array(days_count), (_, i) => {
        i = i + 1;
        const _day = new Date(year, month - 1, i);
        const is_today = now.setHours(0, 0, 0, 0) == _day.setHours(0, 0, 0, 0);
        const is_sunday = _day.getDay() == 0;
        return (
          <td
            class:list={[
              "text-center border-[1px] border-b-0",
              is_sunday ? "bg-error text-gray-100" : is_today ? "bg-neutral-content text-base-300" : "bg-neutral",
            ]}
          >
            {i}
          </td>
        );
      })
    }
    {
      show_total_hours ? (
        <td class="px-2 border-[1px]" rowspan="2">
          Total hours
        </td>
      ) : null
    }
  </tr>
  <tr>
    {
      Array.from(Array(days_count), (_, i) => {
        i = i + 1;
        const _day = new Date(year, month - 1, i);
        const is_today = now.setHours(0, 0, 0, 0) == _day.setHours(0, 0, 0, 0);
        const is_sunday = _day.getDay() == 0;
        return (
          <td
            class:list={[
              "text-center  border-[1px] border-t-0",
              is_sunday ? "bg-error text-gray-100" : is_today ? "bg-neutral-content text-base-300" : "bg-neutral",
            ]}
          >
            {dayFormat.format(_day)}
          </td>
        );
      })
    }
  </tr>
</>
